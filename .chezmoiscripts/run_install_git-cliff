#!/usr/bin/env bash
# ~/.local/share/chezmoi/.chezmoiscripts/run-git-cliff
set -euo pipefail

INSTALL_PATH="$HOME/.local/bin/git-cliff"
REPO="orhun/git-cliff"
BIN_DIR="$(dirname "$INSTALL_PATH")"

err() { echo "❗ $*" >&2; }

# --- Version comparison helper ---
verlte() { printf '%s\n' "$1" "$2" | sort -C -V; }

# --- Detect OS and architecture ---
OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
ARCH="$(uname -m)"
case "$ARCH" in
  x86_64) ARCH="x86_64" ;;
  aarch64|arm64) ARCH="aarch64" ;;
  *) err "Unsupported architecture: $ARCH"; exit 1 ;;
esac

# --- Get latest release ---
LATEST_VERSION=$(curl -s https://api.github.com/repos/$REPO/releases/latest | jq -r .tag_name)
LATEST_VERSION=${LATEST_VERSION#v}
if [[ -z "$LATEST_VERSION" || "$LATEST_VERSION" == "null" ]]; then
    err "Failed to get latest git-cliff version."
    exit 1
fi

# --- Check if git-cliff exists elsewhere ---
EXISTING_PATH="$(command -v git-cliff || true)"
if [[ -n "$EXISTING_PATH" && "$EXISTING_PATH" != "$INSTALL_PATH" ]]; then
    INSTALLED_VERSION="$($EXISTING_PATH --version 2>/dev/null | awk '{print $NF}' || true)"
    echo "✅ Found git-cliff at $EXISTING_PATH (version $INSTALLED_VERSION). Managed elsewhere — doing nothing."
    if verlte "$LATEST_VERSION" "$INSTALLED_VERSION"; then
        echo "✅ System git-cliff is up to date ($INSTALLED_VERSION)"
    else
        err "Warning: system git-cliff ($INSTALLED_VERSION) is older than latest ($LATEST_VERSION)."
    fi
    exit 0
fi

# --- Check if installed in our path ---
if [[ -x "$INSTALL_PATH" ]]; then
    CURRENT_VERSION="$("$INSTALL_PATH" --version 2>/dev/null | awk '{print $NF}' || true)"
    if verlte "${LATEST_VERSION}" "$CURRENT_VERSION"; then
        echo "✅ git-cliff $CURRENT_VERSION is already up-to-date."
        exit 0
    fi
    echo "⬆️ Updating git-cliff from $CURRENT_VERSION to $LATEST_VERSION..."
else
    echo "⬇️ Installing git-cliff $LATEST_VERSION..."
fi

# --- Decide which binary to download ---


case "$OS" in
    linux)
        # Choose musl build when musl is detected or glibc is older than MIN_GLIBC_VERSION.
        MIN_GLIBC_VERSION="2.34"
        GLIBC_VERSION=$(ldd --version 2>&1 | awk 'NR==1{print $NF}' 2>/dev/null || true)
        if ldd --version 2>&1 | grep -qi musl; then
            MUSL_DETECTED=true
        else
            MUSL_DETECTED=false
        fi

        # Use musl when musl is detected, glibc is missing, or glibc < MIN_GLIBC_VERSION
        if $MUSL_DETECTED || [[ -z "$GLIBC_VERSION" ]] || ! verlte "$MIN_GLIBC_VERSION" "$GLIBC_VERSION"; then
            ASSET="git-cliff-${LATEST_VERSION}-${ARCH}-unknown-linux-musl.tar.gz"
            echo "ℹ️ Using musl build (musl detected or glibc < $MIN_GLIBC_VERSION)."
        else
            ASSET="git-cliff-${LATEST_VERSION}-${ARCH}-unknown-linux-gnu.tar.gz"
            echo "ℹ️ Using glibc build (glibc $GLIBC_VERSION)."
        fi
        ;;
    darwin)
        ASSET="git-cliff-${LATEST_VERSION}-${ARCH}-apple-darwin.tar.gz"
        ;;
    *)
        err "Unsupported OS: $OS"
        exit 1
        ;;
esac

URL="https://github.com/${REPO}/releases/download/${LATEST_VERSION}/${ASSET}"

# --- Create target directory ---
mkdir -p "$BIN_DIR"

set -x

# --- Download and extract ---
TMP_DIR=$(mktemp -d)
(
    cd "$TMP_DIR"
    echo "📦 Downloading $ASSET..."
    curl -sL "$URL" -o "$ASSET"
    tar zxf "$ASSET"
    BIN_PATH="$(find . -type f -name git-cliff -executable -print -quit)"
    if [[ ! -f "$BIN_PATH" ]]; then
        err "Could not find git-cliff binary in archive."
        exit 1
    fi
    install -m 755 "$BIN_PATH" "$INSTALL_PATH"
)
rm -rf "$TMP_DIR"

echo "✅ git-cliff $LATEST_VERSION installed to $INSTALL_PATH"

