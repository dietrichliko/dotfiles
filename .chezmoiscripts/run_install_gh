#!/bin/bash
# ~/.local/share/chezmoi/.chezmoiscripts/run-gh
# Install or update GitHub CLI (gh)
# Dietrich Liko
set -euo pipefail

INSTALL_PATH="$HOME/.local/bin/gh"
LOCAL_DIR="$HOME/.local"
REPO="cli/cli"

err() { echo "‚ùó $*" >&2; }

# --- Compare versions ---
verlte() { printf '%s\n%s\n' "$1" "$2" | sort -V -C; }

# --- Detect OS and architecture ---
OS_RAW="$(uname -s | tr '[:upper:]' '[:lower:]')"
ARCH_RAW="$(uname -m)"

case "$ARCH_RAW" in
  x86_64) ARCH="amd64" ;;
  aarch64|arm64) ARCH="arm64" ;;
  *) err "Unsupported architecture: $ARCH_RAW"; exit 1 ;;
esac

case "$OS_RAW" in
  linux) OS_NAME="linux"; EXT="tar.gz" ;;
  darwin) OS_NAME="macOS"; EXT="zip" ;;
  *) err "Unsupported OS: $OS_RAW"; exit 1 ;;
esac

# --- Get latest release URL ---
MATCH="gh_.*_${OS_NAME}_${ARCH}\\.${EXT}$"
URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | \
      jq -r --arg match "$MATCH" '.assets[] | select(.name | test($match)) | .browser_download_url')

if [[ -z "$URL" ]]; then
    err "Could not find a release URL for $OS_NAME/$ARCH"
    exit 1
fi

# --- Extract latest version from asset name ---
NAME="${URL##*/}"  # e.g., gh_2.36.0_linux_amd64.tar.gz
LATEST_VERSION=$(echo "$NAME" | cut -d_ -f2)

# --- Check existing installation ---
if command -v gh &>/dev/null; then
    INSTALLED_VERSION=$(gh --version | head -n1 | awk '{print $3}')
    if verlte "$LATEST_VERSION" "$INSTALLED_VERSION"; then
        echo "‚úÖ gh $INSTALLED_VERSION is up-to-date."
        exit 0
    else
        echo "‚¨ÜÔ∏è Updating gh from $INSTALLED_VERSION to $LATEST_VERSION..."
    fi
else
    echo "‚¨áÔ∏è Installing gh $LATEST_VERSION..."
fi

# --- Prepare install directory ---
mkdir -p "$LOCAL_DIR"/{bin,share}

# --- Download and extract ---
TMP_DIR=$(mktemp -d)
(
    cd "$TMP_DIR"
    TMP_ARCHIVE="$(basename "$NAME")"
    echo "üì¶ Downloading $TMP_ARCHIVE..."
    curl -sL "$URL" -o "$TMP_ARCHIVE"

    if [[ "$EXT" == "tar.gz" ]]; then
        tar xzf "$TMP_ARCHIVE" --strip-components 1 -C "$LOCAL_DIR" --exclude LICENSE
    elif [[ "$EXT" == "zip" ]]; then
        unzip -q "$TMP_ARCHIVE" -d extracted
        # Move the 'gh' binary to BIN_DIR
        mv -v extracted/*/bin/gh "$LOCAL_DIR/bin"
        cp -a extracted/*/share/. "$LOCAL_DIR/share/"
    fi
)
rm -rf "$TMP_DIR"

echo "‚úÖ gh $LATEST_VERSION installed to $INSTALL_PATH"

