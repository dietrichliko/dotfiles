# Manage the BW_SESSION secret using the keyring
# Compatible with bash and zsh
# This script should only be sourced, not executed

# Exit on any error
set -e

# Note: Using '|| :' to catch pipe failures and continue execution
# This prevents the script from exiting when optional operations fail

# Configuration
BW_ACCOUNT="Dietrich.Liko@gmail.com"

{{ if eq .chezmoi.os "darwin" }}
# macOS: use keychain, no session file
SESSION_KEY="bw_session_${USER}"
{{ else if eq .location "desktop" "Desktop" }}
# Desktop GNOME: use secret-tool, no session file
SESSION_KEY="bw_session_${USER}"
{{ else }}
# Server/other: use a per-user session file under /run/user
SESSION_FILE="/run/user/${UID:-$(id -u)}/bw_session_${USER}"
{{ end }}

# Retrieve existing session token from keyring/keychain
{{ if eq .chezmoi.os "darwin" }}
# macOS: Retrieve from keychain
export BW_SESSION=$(security find-generic-password -a "$USER" -s "$SESSION_KEY" -w 2>/dev/null || :)
{{ else if eq .location "desktop" "Desktop" }}
# Desktop Linux: Retrieve from GNOME keyring
export BW_SESSION=$(secret-tool lookup user "$USER" key "$SESSION_KEY" 2>/dev/null || :)
{{ else }}
# Server/other: Retrieve session from the session file (see SESSION_FILE above)
BW_SESSION=""
if [ -f "$SESSION_FILE" ]; then
    # Use the shell builtin 'read' to avoid spawning an external 'cat'.
    IFS= read -r BW_SESSION < "$SESSION_FILE" 2>/dev/null || :
fi
export BW_SESSION
{{ end }}

# Check if current session is still valid
if [ -n "$BW_SESSION" ] && bw unlock --check >/dev/null 2>&1; then
    # Session is valid
    return
fi

# Session is invalid or doesn't exist, need to authenticate
if bw status | grep -q '"status":"locked"' || :; then
    # Bitwarden is logged in but locked, just unlock
    echo "Bitwarden is locked, unlocking..." >&2
    export BW_SESSION=$(bw unlock --raw || :)
else
    # Not logged in, need to login first
    echo "Logging into Bitwarden..." >&2
    export BW_SESSION=$(bw login "$BW_ACCOUNT" --method 0 --raw || :)
fi

# Check if authentication was successful
if [ -z "$BW_SESSION" ]; then
    echo "Failed to authenticate with Bitwarden" >&2
    return 1
fi
export BW_SESSION

# Store the new session token for future use
{{ if (eq .chezmoi.os "darwin") }}
# macOS: Use keychain
security add-generic-password -a "$USER" -s "$SESSION_KEY" -w "$BW_SESSION" -U >/dev/null || :
{{ else if (eq .location "Desktop") }}
# Desktop Linux: Use secret-tool (GNOME keyring)
echo -n "$BW_SESSION" | secret-tool store --label="Bitwarden Session" user "$USER" key "$SESSION_KEY" || :
{{ else }}
# Server/other: Store session in the session file (see SESSION_FILE above).
# Ensure the file is written with strict permissions. Use umask to prevent
# other users from seeing the file during creation.
(
    umask 077
    printf '%s' "$BW_SESSION" > "$SESSION_FILE" || :
)
chmod 600 "$SESSION_FILE" 2>/dev/null || :
{{ end }}


echo "Bitwarden session established and stored" >&2



